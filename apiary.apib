FORMAT: 1A
HOST: http://api.appstorehq.net/




# Boost

Boost has a fairly simple API which leverages JWT authentication.

Should you require any assistance implementing Boost's API, please feel free to contact us via our LiveUI Slack on channel <a href="http://bit.ly/2B0dEyt">#help-boost</a>
[![Slack](https://img.shields.io/badge/join-our%20slack-745EAF.svg?style=flat)](http://bit.ly/2B0dEyt)

Open source code licensed under Apache 2 license can be found on github.com: [![Slack](https://img.shields.io/badge/source-github.com-black.svg?style=flat)](https://github.com/manGoweb/Boost)

## Install [/install]

Installs default admin user. Login `admin@liveui.io`, password `admin`. 

*Endpoint doesn't work in a `production` environment.*

### Install [GET]

+ Response 200 (application/json; charset=utf-8)
            
    + Body

            {
                "code": "maintenance_ok",
                "description": "Install finished"
            }

+ Response 412 (application/json; charset=utf-8)

        {
            "error": "not_available",
            "description": "Endpoint is not available in production mode"
        }
        
        
## Demo [/demo]

Installs default admin user. Login `admin@liveui.io`, password `admin` plus a set of demo data for testing.

*Endpoint doesn't work in a `production` environment.*

### Demo [GET]

+ Response 200 (application/json; charset=utf-8)
            
    + Body

            {
                "code": "maintenance_ok",
                "description": "Install finished"
            }

+ Response 412 (application/json; charset=utf-8)

        {
            "error": "not_available",
            "description": "Endpoint is not available in production mode"
        }
        
        
        
## Authentication [/auth]

When authenticating, first you need to get a permanent token which your client needs to store locally for further use.
Response header also contains a JWT token which will be valid for 3 minutes. When JWT token expires it needs to be refreshed using "Refresh JWT token"

### Get permanent token (BASIC auth) [GET]


+ Request
    
    + Headers

            Authorization: Basic YWRtaW5AbGl2ZXVpLmlvOmFkbWlu


+ Response 200 (application/json; charset=utf-8)
    + Headers

            Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MTk4NTk0ODIuOTgwNzgzOSwidXNlcklkIjoiNjMwQzk3RTYtQUM1Ni00MjEzLTg4MkItM0JFQkFFNTBCRjZEIn0.aPMfWZnHJSHa_rDxY-u9x-Vs-amQvxeVL8zGrPhwNGU
            
    + Body

            {
                "expires": 543969500.30378401,
                "id": "62D26F36-4E50-4D5C-921D-A0B30672BC83",
                "token": "F8CAB8E4-F507-46AC-9F15-B2C369C23126",
                "user": {
                    "password": "admin",
                    "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                    "lastname": "Admin",
                    "registered": 541114427,
                    "firstname": "Super",
                    "email": "admin@liveui.io",
                    "su": true,
                    "disabled": false
                }
            }

+ Response 401 (application/json; charset=utf-8)

        {
            "error": "auth_error",
            "description": "Authentication has failed"
        }

### Get permanent token [POST]


+ Request
    + Headers
    
            Content-Type: application/json
            

    + Body

            {
                "username": "admin@liveui.io",
                "password": "s3cretPassw0rd"
            }

+ Response 200 (application/json; charset=utf-8)
    + Headers

            Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MTk4NTk0ODIuOTgwNzgzOSwidXNlcklkIjoiNjMwQzk3RTYtQUM1Ni00MjEzLTg4MkItM0JFQkFFNTBCRjZEIn0.aPMfWZnHJSHa_rDxY-u9x-Vs-amQvxeVL8zGrPhwNGU
            
    + Body

            {
                "expires": 543969500.30378401,
                "id": "62D26F36-4E50-4D5C-921D-A0B30672BC83",
                "token": "F8CAB8E4-F507-46AC-9F15-B2C369C23126",
                "user": {
                    "password": "admin",
                    "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                    "lastname": "Admin",
                    "registered": 541114427,
                    "firstname": "Super",
                    "email": "admin@liveui.io",
                    "su": true,
                    "disabled": false
                }
            }

+ Response 401 (application/json; charset=utf-8)

        {
            "error": "auth_error",
            "description": "Authentication has failed"
        }


## Token refresh [/token]

JWT token needs to be refreshed after 30 seconds from the last request made. With each successful request the token's expiration is extended.


### Refresh JWT token (BASIC auth) [GET]


+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072


+ Response 200 (application/json; charset=utf-8)

    + Headers

            Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MTk4NTk0ODIuOTgwNzgzOSwidXNlcklkIjoiNjMwQzk3RTYtQUM1Ni00MjEzLTg4MkItM0JFQkFFNTBCRjZEIn0.aPMfWZnHJSHa_rDxY-u9x-Vs-amQvxeVL8zGrPhwNGU
            
    + Body

            {
                "id": "205E4B37-E57E-4474-A681-602BF49D56A3",
                "user": {
                    "id": "8E6EFF51-8773-48DF-A1F5-D0A8C25BF9EF",
                    "lastname": "Admin",
                    "registered": "2018-03-26T17:06:22Z",
                    "firstname": "Super",
                    "username": "admin",
                    "email": "admin@liveui.io",
                    "su": true,
                    "disabled": false
                },
                "expires": "2018-05-08T16:23:22Z"
            }

+ Response 401 (application/json; charset=utf-8)

        {
            "error": "auth_error",
            "description": "Authentication has failed"
        }


### Refresh JWT token [POST]


+ Request
    
    + Headers
    
            Content-Type: application/json
            
    + Body

            {
                "token": "EA58FE6F-E2A0-404D-A252-1BBFB286A072"
            }


+ Response 200 (application/json; charset=utf-8)

    + Headers

            Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MTk4NTk0ODIuOTgwNzgzOSwidXNlcklkIjoiNjMwQzk3RTYtQUM1Ni00MjEzLTg4MkItM0JFQkFFNTBCRjZEIn0.aPMfWZnHJSHa_rDxY-u9x-Vs-amQvxeVL8zGrPhwNGU
            
    + Body

            {
                "id": "205E4B37-E57E-4474-A681-602BF49D56A3",
                "user": {
                    "id": "8E6EFF51-8773-48DF-A1F5-D0A8C25BF9EF",
                    "lastname": "Admin",
                    "registered": "2018-03-26T17:06:22Z",
                    "firstname": "Super",
                    "username": "admin",
                    "email": "admin@liveui.io",
                    "su": true,
                    "disabled": false
                },
                "expires": "2018-05-08T16:23:22Z"
            }

+ Response 401 (application/json; charset=utf-8)

        {
            "error": "auth_error",
            "description": "Authentication has failed"
        }



## Teams [/teams]

JWT token needs to be refreshed after 30 seconds from the last request made. With each successful request the token's expiration is extended.


### List all available teams [GET]


+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072


+ Response 200 (application/json; charset=utf-8)
            
    + Body

            [
                {
                    "initials": "AT",
                    "id": "FF6E32DC-4F23-4F75-ADBA-B50864763386",
                    "admin": true,
                    "name": "Admin Team",
                    "identifier": "admin-team",
                    "color": "06DBAB"
                },
                {
                    "initials": "AY",
                    "id": "2F25DF0A-6B4E-4E14-A693-CFB6A5A26519",
                    "admin": false,
                    "name": "admin Yo!",
                    "identifier": "admin-yo",
                    "color": "65B14B"
                }
            ]


+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



### Create new team [POST]

Team identifier needs to be unique for the whole platform. If sent in an incorect format, string in it will be formatted into a "safe text", for example `My amazing TEAM!` will be formatted into `my-amazing-team`.

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "name": "My new team",
                "identifier": "my-new-team"
            }



+ Response 200 (application/json; charset=utf-8)
            
    + Body

            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "admin": false,
                "name": "My NEW team",
                "identifier": "my-new-team",
                "initials": "MN",
                "color": "06DBAB"
            }

+ Response 409 (application/json; charset=utf-8)

        {
            "code": "app_error",
            "error": "Identifier already exists"
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



## Teams check [/teams/check]


### Check if team exists [POST]

Team identifier needs to be unique for the whole platform. If sent in an incorect format, string in it will be formatted into a "safe text", for example `My amazing TEAM!` will be formatted into `my-amazing-team`.

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "identifier": "my-new-team"
            }



+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "code": "ok",
                "error": "Identifier is available",
                "identifier": "my-new-team"
            }
        
+ Response 408 (application/json; charset=utf-8)

        {
            "code": "app_error",
            "error": "Identifier already exists"
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



## Team [/teams/{teamId}]

For updates, team identifier needs to be unique for the whole platform. If sent in an incorect format, string in it will be formatted into a "safe text", for example `My amazing TEAM!` will be formatted into `my-amazing-team`.


### Get single team [GET]


+ Parameters
    + teamId (required, number) - Id of the team

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "admin": false,
                "name": "MY team",
                "identifier": "my-team",
                "initials": "MY",
                "color": "06DBAB"
            }
        

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



### Update team [PUT]


+ Parameters
    + teamId (required, UUID) - Id of the team

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "name": "My updated team!",
                "identifier": "my-updated-team"
            }



+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "admin": false,
                "name": "My Updated Team!",
                "identifier": "my-updated-team",
                "initials": "MU",
                "color": "06DBAB"
            }
        
+ Response 408 (application/json; charset=utf-8)

        {
            "code": "app_error",
            "error": "Identifier already exists"
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }
        

## List team users [/teams/{teamId}/users]

List active users of a team.

### List [GET]

+ Parameters
    + teamId (required, UUID) - Id of the team


+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

        [
            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "lastname": "Admin",
                "registered": 541114427,
                "su": true,
                "username": "admin",
                "email": "admin@liveui.io",
                "firstname": "Super",
                "disabled": false
            },
            {
                "id": "59ECA5DB-6603-4C08-B910-B32922A34FA9",
                "lastname": "Rafaj",
                "registered": 541550120,
                "su": false,
                "username": "rafiki2000",
                "email": "dev@liveui.io",
                "firstname": "Ondrej",
                "disabled": false
            }
        ]

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }
        
        
## Link user to a team [/teams/{teamId}/link]

Link an existing user to a team.

### Link [POST]

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "user_id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D"
            }



+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "code": "ok",
                "error": "User has been added to the team"
            }
        
+ Response 409 (application/json; charset=utf-8)

        {
            "code": "team_error",
            "error": "User is already a member of the team"
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }


## Remove user from a team [/teams/{teamId}/unlink]

Reverse the effect of an invitation. User will be removed from the team but won't be completely deleted.

### Unlink [POST]

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "user_id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D"
            }



+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "code": "ok",
                "error": "User has been removed from the team"
            }
        
+ Response 404 (application/json; charset=utf-8)

        {
            "code": "team_error",
            "error": "User not found"
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



## Users [/users?search={search_term}]


### List and/or search [GET]

List active users available within your scope.


+ Parameters
    + search_term (optional, string) - Partial or full search keyword


+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

        [
            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "lastname": "Admin",
                "registered": 541114427,
                "username": "admin",
                "su": true,
                "email": "admin@liveui.io",
                "firstname": "Super",
                "disabled": false
            },
            {
                "id": "59ECA5DB-6603-4C08-B910-B32922A34FA9",
                "lastname": "Rafaj",
                "registered": 541550120,
                "username": "rafiki2000",
                "su": false,
                "email": "dev@liveui.io",
                "firstname": "Ondrej",
                "disabled": false
            }
        ]

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }
        
        
### Register user [POST]

Register endpoint is not secured and should be used for new registrations by users, not invitations.

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "username": "aceofspades",
                "firstname": "Lemmy",
                "lastname": "Kilmister",
                "email": "lemmy@liveui.io",
                "password": "sup3rS3cr3t"
            }



+ Response 200 (application/json; charset=utf-8)
            
    + Body

            {
                "id": "8E6EFF51-8773-48DF-A1F5-D0A8C25BF9EF",
                "email": "lemmy@liveui.io",
                "lastname": "Kilmister",
                "username": "admin",
                "registered": 542296870.67299497,
                "disabled": true,
                "su": false,
                "firstname": "Lemmy"
            }

+ Response 409 (application/json; charset=utf-8)

        {
            "code": "user_error",
            "error": "Email already exists"
        }


        

## Global users [/users/global?search={search_term}]


### List and/or search [GET]


List active users within the running instance with confidential information obscured or removed.


+ Parameters
    + search_term (required, string) - Partial or full search keyword


+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

        [
            {
                "avatar": "https://www.gravatar.com/avatar/6dfb5866908b5c82523599ac16f55d6a",
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "lastname": "Admin",
                "registered": 541114427,
                "username": "admin",
                "su": true,
                "firstname": "Super",
                "disabled": false
            },
            {
                "avatar": "https://www.gravatar.com/avatar/6dfb5866908b5c82523599ac16f55d6a",
                "id": "59ECA5DB-6603-4C08-B910-B32922A34FA9",
                "lastname": "Rafaj",
                "registered": 541550120,
                "username": "rafiki2000",
                "su": false,
                "firstname": "Ondrej",
                "disabled": false
            }
        ]

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }
        

## App JWT authenticated upload [/teams/{teamId}/apps?tags={tagsArray}]

Standard JWT token is used to authenticate.

### Upload new app [POST]

- When uploading new apps submit `.ipa` or `.apk` file as a full POST request payload. 
- Multiple tags should be separated by `|`, for example `/upload?tags=tag1|library_version_1.2.3|some%20Other%20tag`
- Mime types (Content-Type)
   - iOS app is <b><i>application/octet-stream</i></b>
   - Android app is <b><i>application/vnd.android.package-archive</i></b>

+ Request
    
    + Headers

            Authorization: Bearer eyJhbGciOiJIUzUxMiIsInVzZXIiOjEsInRva2VuIjoiRTk3OTYzMjItOURBNy00RTAwLTlCNTItOEI4RThBRjkwRDAxIiwidHlwIjoiSldUIn0
            Content-Type: application/octet-stream



+ Response 201 (application/json; charset=utf-8)

    + Body

            {
                "build": "123",
                "basic": false,
                "id": 3,
                "platform": 2,
                "team_id": 1,
                "version": "1.2.3",
                "identifier": "com.boost.super-app1",
                "created": 535044877,
                "name": "Super app3",
                "modified": 535044877
            }

    + Attributes (App)

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "authentication failed"
        }
    
 
## App CI upload [/apps?token={token}&tags={tagsArray}]

Upload token (in the url) is used to authenticate. It can be created using `/keys` endpoint.

### Upload new app [POST]

- When uploading new apps submit `.ipa` or `.apk` file as a full POST request payload. 
- Multiple tags should be separated by `|`, for example `/upload?tags=tag1|library_version_1.2.3|some%20Other%20tag`
- Mime types (Content-Type)
   - iOS app is <b><i>application/octet-stream</i></b>
   - Android app is <b><i>application/vnd.android.package-archive</i></b>

+ Request
    
    + Headers

            Content-Type: application/octet-stream



+ Response 201 (application/json; charset=utf-8)

    + Body

            {
                "build": "123",
                "basic": false,
                "id": 3,
                "platform": 2,
                "team_id": 1,
                "version": "1.2.3",
                "identifier": "com.boost.super-app1",
                "created": 535044877,
                "name": "Super app3",
                "modified": 535044877
            }
    
            
    + Attributes (App)

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "authentication failed"
        }

        
            
## Apps [/apps?limit=20&page1&platform=ios&identifier=io.liveui.admin-app]

You can also search by `?search={search_term}` which searches in name, info, identifier, version, build number.

The identifier is a search on it's own also, that's why only a partial tring is allowed there.

JWT token is used to authenticate.

### List builds for app [GET]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request
    
    + Headers

            Authorization: Bearer eyJhbGciOiJIUzUxMiIsInVzZXIiOjEsInRva2VuIjoiRTk3OTYzMjItOURBNy00RTAwLTlCNTItOEI4RThBRjkwRDAxIiwidHlwIjoiSldUIn0


+ Response 200 (application/json; charset=utf-8)

    + Body

            [
                {
                    "build": "123",
                    "basic": false,
                    "id": 1,
                    "platform": 1,
                    "team_id": 1,
                    "version": "1.2.3",
                    "identifier": "com.boost.super-app1",
                    "created": 535044877,
                    "name": "Super app 1",
                    "modified": 535044877
                },
                {
                    "build": "123",
                    "basic": false,
                    "id": 2,
                    "platform": 2,
                    "team_id": 1,
                    "version": "1.2.3",
                    "identifier": "com.boost.super-app1",
                    "created": 535044877,
                    "name": "Super app2",
                    "modified": 535044877
                },
                {
                    "build": "123",
                    "basic": false,
                    "id": 3,
                    "platform": 2,
                    "team_id": 1,
                    "version": "1.2.3",
                    "identifier": "com.boost.super-app1",
                    "created": 535044877,
                    "name": "Super app3",
                    "modified": 535044877
                }
            ]
            
    + Attributes (Apps)

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "authentication failed"
        }
        

## Overview [/apps/overview]

List available app identifiers per platform. 
JWT token is used to authenticate.

### Get overview [GET]

+ Request
    
    + Headers

            Authorization: Bearer eyJhbGciOiJIUzUxMiIsInVzZXIiOjEsInRva2VuIjoiRTk3OTYzMjItOURBNy00RTAwLTlCNTItOEI4RThBRjkwRDAxIiwidHlwIjoiSldUIn0


+ Response 200 (application/json; charset=utf-8)

    + Body

            [
                {
                    "platform": "android",
                    "count": 1,
                    "identifier": "cz.mangoweb.goodlok"
                },
                {
                    "platform": "ios",
                    "count": 3,
                    "identifier": "com.liveui.boost-app"
                },
                {
                    "platform": "android",
                    "count": 1,
                    "identifier": "com.example.app-id"
                }
            ]
            
    + Attributes (Apps)

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "authentication failed"
        }
        

## Overview for teams [/teams/{id}/apps/overview]

List available app identifiers per platform for a specific team. 
JWT token is used to authenticate.

+ Parameters
    + id (required, number) - Application ID

### Get overview [GET]

+ Request
    
    + Headers

            Authorization: Bearer eyJhbGciOiJIUzUxMiIsInVzZXIiOjEsInRva2VuIjoiRTk3OTYzMjItOURBNy00RTAwLTlCNTItOEI4RThBRjkwRDAxIiwidHlwIjoiSldUIn0


+ Response 200 (application/json; charset=utf-8)

    + Body

            [
                {
                    "platform": "android",
                    "count": 1,
                    "identifier": "cz.mangoweb.goodlok"
                },
                {
                    "platform": "ios",
                    "count": 3,
                    "identifier": "com.liveui.boost-app"
                },
                {
                    "platform": "android",
                    "count": 1,
                    "identifier": "com.example.app-id"
                }
            ]
            
    + Attributes (Apps)

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "authentication failed"
        }
        

## Single app [/apps/{id}]

JWT token is used to authenticate.

+ Parameters
    + id (required, UUID) - Application ID

### App detail [GET]

Return a single app detail.

+ Request
    
    + Headers

            Authorization: Bearer eyJhbGciOiJIUzUxMiIsInVzZXIiOjEsInRva2VuIjoiRTk3OTYzMjItOURBNy00RTAwLTlCNTItOEI4RThBRjkwRDAxIiwidHlwIjoiSldUIn0


+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "build": "123",
                "basic": false,
                "id": 1,
                "platform": 1,
                "team_id": 1,
                "version": "1.2.3",
                "identifier": "com.boost.super-app1",
                "created": 535044877,
                "name": "Super app 1",
                "modified": 535044877
            }

    + Attributes (App)
            
+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "authentication failed"
        }
        
            
### Update app [PUT]

Updates an app. Only name of the app can be updated.

+ Request
    
    + Headers

            Authorization: Bearer eyJhbGciOiJIUzUxMiIsInVzZXIiOjEsInRva2VuIjoiRTk3OTYzMjItOURBNy00RTAwLTlCNTItOEI4RThBRjkwRDAxIiwidHlwIjoiSldUIn0
            
    + Body

            {
                "basic": false,
                "name": "Updated app name"
            }
    
    + Attributes (AppPut)

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "build": "123",
                "basic": false,
                "id": 1,
                "platform": 1,
                "team_id": 1,
                "version": "1.2.7",
                "identifier": "com.boost.super-app1",
                "created": 535044877,
                "name": "Updated app name",
                "modified": 535044877
            }

    + Attributes (App)

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "authentication failed"
        }
        
            
### Delete app [DELETE]

Deletes an app, returns a `204` ok but no response needed on success.

+ Request
    
    + Headers

            Authorization: Bearer eyJhbGciOiJIUzUxMiIsInVzZXIiOjEsInRva2VuIjoiRTk3OTYzMjItOURBNy00RTAwLTlCNTItOEI4RThBRjkwRDAxIiwidHlwIjoiSldUIn0


+ Response 204 (text/plain)

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "authentication failed"
        }


## App download authenticator [/apps/{id}/auth]

Use this endpoint to generate download authentication token for `plist` and `file` endpoints. These are neccessary in order to gain access to the binaries.

Download token will stay valid for 30 minutes

JWT token is used to authenticate.

+ Parameters
    + id (required, number) - Application ID
    

### Generate token [GET]

+ Request
    
    + Headers

            Authorization: Bearer eyJhbGciOiJIUzUxMiIsInVzZXIiOjEsInRva2VuIjoiRTk3OTYzMjItOURBNy00RTAwLTlCNTItOEI4RThBRjkwRDAxIiwidHlwIjoiSldUIn0

+ Response 200 (application/json; charset=utf-8)
            
    + Body

            {
                "download_token": "A40AD800-416E-462C-AFEE-9943410984F7",
                "file": "https://api.yourstore.com/app/file?token=A40AD800-416E-462C-AFEE-9943410984F7",
                "plist": "https://api.yourstore.com/app/plist?token=A40AD800-416E-462C-AFEE-9943410984F7",
                "ios": "itms-services://?action=download-manifest&url=://api.yourstore.com/app/plist?token=A40AD800-416E-462C-AFEE-9943410984F7",
                "app_id": "A40AD800-416E-462C-AFEE-9943410984F7"
            }
                
            
            
+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "authentication failed"
        }
  

## iOS app info plist [/apps/plist{?token}]

iOS applications require a special xml that needs to be referenced from the download link.

The plist link (as well as the download token) will be returned by an app download generator and should have a following format:
```
<a href="itms-services://?action=download-manifest&url=https://api.yourstore.com/app/plist?token={DOWNLOAD_TOKEN}">Amazing App</a>
```

Download token will stay valid for 15 minutes

+ Parameters
    + token (string, required) - Authentication token created using app download auth generator

### PropertyList file [GET]

+ Response 200 (application/xml; charset=utf-8)

    + Body

            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
                <dict>
                    <key>items</key>
                    <array>
                        <dict>
                            <key>assets</key>
                            <array>
                                <dict>
                                    <key>kind</key>
                                    <string>software-package</string>
                                    <key>url</key>
                                    <string>https://api.yourstore.com/app/A40AD800-416E-462C-AFEE-9943410984F7/file?download=A40AD800-416E-462C-AFEE-9943410984F7</string>
                                </dict>
                            </array>
                            <key>metadata</key>
                            <dict>
                                <key>bundle-identifier</key>
                                <string>io.liveui.adminer</string>
                                <key>bundle-version</key>
                                <string>4.0</string>
                                <key>kind</key>
                                <string>software</string>
                                <key>title</key>
                                <string>LiveUI Admin</string>
                            </dict>
                        </dict>
                    </array>
                </dict>
            </plist>
            
+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "authentication failed"
        }
        

## Download app [/apps/file{?token}]

The actual download link will be returned by an app download generator. For iOS apps, link is automatically included in the enterprise distribution Property List file.

Download token will stay valid for 15 minutes to initialise a new connection. Existing connection won't get interrupted.

+ Parameters
    + token (string) - Authentication token created using app auth generator
    
    
### Binary file (app) [GET]

- Mime type for iOS app is <b><i>application/octet-stream</i></b>
- Mime type for Android app is <b><i>application/vnd.android.package-archive</i></b>

+ Response 200 (application/octet-stream)
    
    + Headers

            Content-Length: 6347479
            Content-Disposition: attachment; filename="my-application-name-in-safe-format.ipa"

            
+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "authentication failed"
        }
  
  
## Upload API keys [/teams/{teamId}/keys]

In order to upload an app you need an upload API key. Keys are bound to teams so any app uploaded using an upload key will be assigned to the selected team.


### List all for a team [GET]


+ Parameters
    + teamId (required, number) - Id of the team

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "id": 3,
                "name": "My team",
                "identifier": "my-team"
            }
        

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



### Create key in a team [POST]


+ Parameters
    + teamId (required, number) - Id of the team

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "name": "My updated team!",
                "identifier": "my-updated-team"
            }



+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "id": 3,
                "name": "My updated team!",
                "identifier": "my-updated-team"
            }
        
+ Response 408 (application/json; charset=utf-8)

        {
            "code": "app_error",
            "error": "Identifier already exists"
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



## ... per user [/keys/]


### List all for a user [GET]

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

        [
            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "lastname": "Admin",
                "registered": 541114427,
                "su": true,
                "email": "admin@liveui.io",
                "firstname": "Super",
                "disabled": false
            },
            {
                "id": "59ECA5DB-6603-4C08-B910-B32922A34FA9",
                "lastname": "Rafaj",
                "registered": 541550120,
                "su": false,
                "email": "dev@liveui.io",
                "firstname": "Ondrej",
                "disabled": false
            }
        ]

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }


## Upload API key [/keys/{id}]


### Get [GET]

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

        [
            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "lastname": "Admin",
                "registered": 541114427,
                "su": true,
                "email": "admin@liveui.io",
                "firstname": "Super",
                "disabled": false
            },
            {
                "id": "59ECA5DB-6603-4C08-B910-B32922A34FA9",
                "lastname": "Rafaj",
                "registered": 541550120,
                "su": false,
                "email": "dev@liveui.io",
                "firstname": "Ondrej",
                "disabled": false
            }
        ]

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }
        

### Update [PUT]

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

        [
            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "lastname": "Admin",
                "registered": 541114427,
                "su": true,
                "email": "admin@liveui.io",
                "firstname": "Super",
                "disabled": false
            },
            {
                "id": "59ECA5DB-6603-4C08-B910-B32922A34FA9",
                "lastname": "Rafaj",
                "registered": 541550120,
                "su": false,
                "email": "dev@liveui.io",
                "firstname": "Ondrej",
                "disabled": false
            }
        ]

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



### Delete [DELETE]

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

        [
            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "lastname": "Admin",
                "registered": 541114427,
                "su": true,
                "email": "admin@liveui.io",
                "firstname": "Super",
                "disabled": false
            },
            {
                "id": "59ECA5DB-6603-4C08-B910-B32922A34FA9",
                "lastname": "Rafaj",
                "registered": 541550120,
                "su": false,
                "email": "dev@liveui.io",
                "firstname": "Ondrej",
                "disabled": false
            }
        ]

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }
        


## Un-Install [/uninstall]

Removes all database tables and data, this operation is irreversible. 

*Endpoint doesn't work in a `production` environment.*

### Un-Install [GET]

+ Response 200 (application/json; charset=utf-8)
            
    + Body

            {
                "code": "maintenance_ok",
                "description": "Install finished"
            }

+ Response 412 (application/json; charset=utf-8)

        {
            "error": "not_available",
            "description": "Endpoint is not available in production mode"
        }
        
        
## Re-Install [/reinstall]

Combination of **Un-Install** and #Install, loss of the original data is irreversible.

*Endpoint doesn't work in a `production` environment.*

### Re-Install [GET]

+ Response 200 (application/json; charset=utf-8)
            
    + Body

            {
                "code": "maintenance_ok",
                "description": "Install finished"
            }

+ Response 412 (application/json; charset=utf-8)

        {
            "error": "not_available",
            "description": "Endpoint is not available in production mode"
        }
        

## Show tables [/tables]

Shows a list of database tables available. 

*Endpoint doesn't work in a `production` environment.*

### Show tables [GET]

+ Response 200 (application/json; charset=utf-8)
            
    + Body

            [
                "apps",
                "fluent",
                "tokens",
                "users"
            ]

+ Response 412 (application/json; charset=utf-8)

        {
            "error": "not_available",
            "description": "Endpoint is not available in production mode"
        }
        


            
## Teapot [/teapot]

No authentication is needed

### Check [GET]

+ Response 418 (application/json; charset=utf-8)

    + Body

            {
                "message": "I am a teapot!"
            }


## Ping [/ping]

No authentication is needed

### Check [GET]

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "message": "pong"
            }




# Data Structures

## AppPut (object)
- build: 567 (string, required) - Build number
- basic: false (boolean, required) - App version
- version: 1.2.3 (string, required) - App version
- identifier: com.boost.super-app1 (number, required) - Bundle identifier
- name: My app name (string, required) - Application name as displayed on the device

## App (object)
- id: XXXXX (string, required) - ID
- platform: ios (string, required) - Platform (ios, android)
- team_id: XXXXX (string, required) - Team id
- created: 535044877 (number, required) - Date created (timestamp)
- modified: 535044877 (number, required) - Date last modified (timestamp)
- Include AppPut

## Apps (array)
- (array[App])

## Tag (object)
- id: XXXXX (string) - ID
- name: my_custom_tag_123 (string, required) - Tag value


## Tags (array)
+ (array[Tag])