{
	"info": {
		"name": "Boost 2",
		"_postman_id": "8fa44547-1ad4-e1fb-53c1-9f93fe4a89b2",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Install",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}install",
					"host": [
						"{{SERVER}}install"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Demo",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}demo",
					"host": [
						"{{SERVER}}demo"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Re-Install",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}reinstall",
					"host": [
						"{{SERVER}}reinstall"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Un-Install",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}uninstall",
					"host": [
						"{{SERVER}}uninstall"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Auth (BASIC)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a4fca42-18ee-49ac-bbe5-0fdca7102e0a",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"// Token check",
							"tests[\"Token has an id\"] = (jsonData[\"id\"].length > 10)",
							"tests[\"Token has a user\"] = (jsonData[\"user\"][\"id\"].length > 10)",
							"tests[\"Token has a token\"] = (jsonData[\"token\"].length > 10)",
							"tests[\"Token has expires\"] = (jsonData[\"expires\"] > 543533823)",
							"",
							"postman.setEnvironmentVariable(\"AUTH_TOKEN\", jsonData[\"token\"]);",
							"",
							"// JWT",
							"var jwtAuthExists = responseHeaders.hasOwnProperty(\"Authorization\") || responseHeaders.hasOwnProperty(\"authorization\");",
							"tests[\"JWT Token is present\"] = jwtAuthExists;",
							"",
							"if (jwtAuthExists) {",
							"    var a = responseHeaders[\"Authorization\"] || responseHeaders[\"authorization\"];",
							"    tests[\"JWT token has a bearer\"] = a.has(\"Bearer \");",
							"    tests[\"JWT token has a value\"] = (a.length > 15);",
							"    postman.setEnvironmentVariable(\"JWT_AUTH\", a.substring(7));",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@liveui.io",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}auth",
					"host": [
						"{{SERVER}}auth"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "14b7eed6-43ce-4209-a4fb-ae3f9587c6f9",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"// Token check",
							"tests[\"Token has an id\"] = (jsonData[\"id\"].length > 10)",
							"tests[\"Token has a user\"] = (jsonData[\"user\"][\"id\"].length > 10)",
							"tests[\"Token has a token\"] = (jsonData[\"token\"].length > 10)",
							"tests[\"Token has expires\"] = (jsonData[\"expires\"] > 543533823)",
							"",
							"postman.setEnvironmentVariable(\"AUTH_TOKEN\", jsonData[\"token\"]);",
							"",
							"// JWT",
							"var jwtAuthExists = responseHeaders.hasOwnProperty(\"Authorization\") || responseHeaders.hasOwnProperty(\"authorization\");",
							"tests[\"JWT Token is present\"] = jwtAuthExists;",
							"",
							"if (jwtAuthExists) {",
							"    var a = responseHeaders[\"Authorization\"] || responseHeaders[\"authorization\"];",
							"    tests[\"JWT token has a bearer\"] = a.has(\"Bearer \");",
							"    tests[\"JWT token has a value\"] = (a.length > 15);",
							"    postman.setEnvironmentVariable(\"JWT_AUTH\", a.substring(7));",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"admin\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}auth",
					"host": [
						"{{SERVER}}auth"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "JWT refresh",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9d95079a-2a8b-4522-a62f-c96a98cfb2ba",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"// Token check",
							"tests[\"Token has an id\"] = (jsonData[\"id\"].length > 10)",
							"tests[\"Token has a user\"] = (jsonData[\"user\"][\"id\"].length > 10)",
							"tests[\"Token has expires\"] = (jsonData[\"expires\"] > 543533823)",
							"",
							"// JWT",
							"var jwtAuthExists = responseHeaders.hasOwnProperty(\"Authorization\") || responseHeaders.hasOwnProperty(\"authorization\");",
							"tests[\"JWT Token is present\"] = jwtAuthExists;",
							"",
							"if (jwtAuthExists) {",
							"    var a = responseHeaders[\"Authorization\"] || responseHeaders[\"authorization\"];",
							"    tests[\"JWT token has a bearer\"] = a.has(\"Bearer \");",
							"    tests[\"JWT token has a value\"] = (a.length > 15);",
							"    postman.setEnvironmentVariable(\"JWT_AUTH\", a.substring(7));",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{AUTH_TOKEN}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}token",
					"host": [
						"{{SERVER}}token"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "JWT refresh",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1512bc88-43bb-4ec2-a819-b0872e3cae15",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"// Token check",
							"tests[\"Token has an id\"] = (jsonData[\"id\"].length > 10)",
							"tests[\"Token has a user_id\"] = (jsonData[\"user\"][\"id\"].length > 10)",
							"tests[\"Token has expires\"] = (jsonData[\"expires\"] > 543533823)",
							"",
							"// JWT",
							"var jwtAuthExists = responseHeaders.hasOwnProperty(\"Authorization\") || responseHeaders.hasOwnProperty(\"authorization\");",
							"tests[\"JWT Token is present\"] = jwtAuthExists;",
							"",
							"if (jwtAuthExists) {",
							"    var a = responseHeaders[\"Authorization\"] || responseHeaders[\"authorization\"];",
							"    tests[\"JWT token has a bearer\"] = a.has(\"Bearer \");",
							"    tests[\"JWT token has a value\"] = (a.length > 15);",
							"    postman.setEnvironmentVariable(\"JWT_AUTH\", a.substring(7));",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"token\": \"{{AUTH_TOKEN}}\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}token",
					"host": [
						"{{SERVER}}token"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Teams (teams)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin5\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams",
					"host": [
						"{{SERVER}}teams"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Teams (teams)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec85a8e6-d175-41af-81ea-3b0942b49fa1",
						"type": "text/javascript",
						"exec": [
							"var no = postman.getEnvironmentVariable(\"NEXT_TEST_TEAM_IDENTIFIER_NO\");",
							"if (no === null) {",
							"    no = 0",
							"}",
							"postman.setEnvironmentVariable(\"NEXT_TEST_TEAM_IDENTIFIER_NO\", (parseInt(no) + 1));",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 201\"] = responseCode.code === 201;",
							"",
							"if (responseCode.code === 201) {",
							"    // Token check",
							"    tests[\"Team has an id\"] = (jsonData[\"id\"].length > 0)",
							"    tests[\"Team has an name\"] = (jsonData[\"name\"].length > 0)",
							"    tests[\"Team has an identifier\"] = (jsonData[\"identifier\"].length > 0)",
							"    ",
							"    postman.setEnvironmentVariable(\"TEST_TEAM_ID\", jsonData[\"id\"]);",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");",
							"",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin-{{NEXT_TEST_TEAM_IDENTIFIER_NO}}\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams",
					"host": [
						"{{SERVER}}teams"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Teams (teams/check)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"identifier\": \"admin\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/check",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"check"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "81cd4170-4a0e-4db5-90b4-fd3cf82170a1",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"if (responseCode.code === 200) {",
							"    // Token check",
							"    tests[\"Team has an id\"] = (jsonData[\"id\"].length > 0)",
							"    tests[\"Team has an name\"] = (jsonData[\"name\"].length > 0)",
							"    tests[\"Team has an identifier\"] = (jsonData[\"identifier\"].length > 0)",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");",
							"",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin5\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id/link)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{TEST_USER_ID}}\",\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}/link",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}",
						"link"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id/unlink)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{TEST_USER_ID}}\",\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}/unlink",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}",
						"unlink"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id/users)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin5\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}/users",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}",
						"users"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id)",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin5\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id)",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin5\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id)",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin5\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Users (users)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {},
				"url": {
					"raw": "{{SERVER}}users",
					"host": [
						"{{SERVER}}users"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Users (users)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"email\": \"rafaj@liveui.io\",\n        \"lastname\": \"Ondrej\",\n        \"firstname\": \"Rafaj\",\n        \"password\": \"aaaaaa\"\n    }"
				},
				"url": {
					"raw": "{{SERVER}}users",
					"host": [
						"{{SERVER}}users"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Users (users/search)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {},
				"url": {
					"raw": "{{SERVER}}users/search?q=raf",
					"host": [
						"{{SERVER}}users"
					],
					"path": [
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "raf",
							"equals": true
						}
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Apps (apps)",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}apps",
					"host": [
						"{{SERVER}}apps"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Apps (teams/:id/apps)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e5df00c9-6382-47b9-98ce-f2fc1870ff1b",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 201\"] = responseCode.code === 201;",
							"",
							"// Token check",
							"tests[\"App has an id\"] = (jsonData[\"id\"].length > 0)",
							"tests[\"App has a name\"] = (jsonData[\"name\"].length > 0)",
							"tests[\"App has an identifier\"] = (jsonData[\"identifier\"].length > 2)",
							"",
							"postman.setEnvironmentVariable(\"APP_ID\", jsonData[\"id\"]);",
							"",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "file",
					"file": {}
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}/apps?tags=tag5|tag6|tag7",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}",
						"apps"
					],
					"query": [
						{
							"key": "tags",
							"value": "tag5|tag6|tag7",
							"equals": true
						}
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Apps (apps)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e5df00c9-6382-47b9-98ce-f2fc1870ff1b",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 201\"] = responseCode.code === 201;",
							"",
							"// Token check",
							"tests[\"App has an id\"] = (jsonData[\"id\"].length > 0)",
							"tests[\"App has a name\"] = (jsonData[\"name\"].length > 0)",
							"tests[\"App has an identifier\"] = (jsonData[\"identifier\"].length > 2)",
							"",
							"postman.setEnvironmentVariable(\"APP_ID\", jsonData[\"id\"]);",
							"",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "file",
					"file": {}
				},
				"url": {
					"raw": "{{SERVER}}apps?token={{TEST_UPLOAD_KEY}}&tags=tag1|tag2|tag3|tag4",
					"host": [
						"{{SERVER}}apps"
					],
					"query": [
						{
							"key": "token",
							"value": "{{TEST_UPLOAD_KEY}}",
							"equals": true
						},
						{
							"key": "tags",
							"value": "tag1|tag2|tag3|tag4",
							"equals": true
						}
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Apps (apps/:id)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SERVER}}apps/{{APP_ID}}",
					"host": [
						"{{SERVER}}apps"
					],
					"path": [
						"{{APP_ID}}"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Apps (apps/:id/auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c075b435-49e3-494c-940d-02f1613f4776",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"if (responseCode.code === 200) {",
							"    // Token check",
							"    tests[\"Download token has an ios url\"] = (jsonData[\"ios\"].length > 10)",
							"    tests[\"Download token has a file url\"] = (jsonData[\"file\"].length > 10)",
							"    tests[\"Download token has a token\"] = (jsonData[\"token\"].length > 10)",
							"    tests[\"Download token has a plist url\"] = (jsonData[\"plist\"].length > 10)",
							"    tests[\"Download token has an app_id\"] = (jsonData[\"app_id\"].length > 10)",
							"    ",
							"    postman.setEnvironmentVariable(\"DOWNLOAD_TOKEN\", jsonData[\"token\"]);",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SERVER}}apps/{{APP_ID}}/auth",
					"host": [
						"{{SERVER}}apps"
					],
					"path": [
						"{{APP_ID}}",
						"auth"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Apps (apps/plist)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SERVER}}apps/plist?token={{DOWNLOAD_TOKEN}}",
					"host": [
						"{{SERVER}}apps"
					],
					"path": [
						"plist"
					],
					"query": [
						{
							"key": "token",
							"value": "{{DOWNLOAD_TOKEN}}",
							"equals": true
						}
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Apps (apps/file)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SERVER}}apps/file?token={{DOWNLOAD_TOKEN}}",
					"host": [
						"{{SERVER}}apps"
					],
					"path": [
						"file"
					],
					"query": [
						{
							"key": "token",
							"value": "{{DOWNLOAD_TOKEN}}",
							"equals": true
						}
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Apps (apps/:id/tags)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SERVER}}apps/{{APP_ID}}/tags",
					"host": [
						"{{SERVER}}apps"
					],
					"path": [
						"{{APP_ID}}",
						"tags"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Apps (apps/:id)",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SERVER}}apps/{{APP_ID}}",
					"host": [
						"{{SERVER}}apps"
					],
					"path": [
						"{{APP_ID}}"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Upload keys (keys)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SERVER}}keys",
					"host": [
						"{{SERVER}}keys"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Upload keys (apps/:id/keys)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}/keys",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}",
						"keys"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Upload keys (apps/:id/keys)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "55b9bfee-fdd1-4edd-b389-fe357848166b",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 201\"] = responseCode.code === 201;",
							"",
							"// Token check",
							"tests[\"Key has an id\"] = (jsonData[\"id\"].length > 0)",
							"tests[\"Key has an name\"] = (jsonData[\"name\"].length > 0)",
							"tests[\"Key has a token\"] = (jsonData[\"token\"].length > 0)",
							"tests[\"Key has a correct team_id\"] = (jsonData[\"team_id\"] == postman.getEnvironmentVariable(\"TEST_TEAM_ID\"))",
							"",
							"postman.setEnvironmentVariable(\"TEST_UPLOAD_KEY_ID\", jsonData[\"id\"]);",
							"postman.setEnvironmentVariable(\"TEST_UPLOAD_KEY\", jsonData[\"token\"]);",
							"",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Upload key yo!\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}/keys",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}",
						"keys"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Upload keys (keys/:id)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SERVER}}keys/{{TEST_UPLOAD_KEY_ID}}",
					"host": [
						"{{SERVER}}keys"
					],
					"path": [
						"{{TEST_UPLOAD_KEY_ID}}"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Upload keys (keys/:id)",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Upload key changed yohoho!\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}keys/{{TEST_UPLOAD_KEY_ID}}",
					"host": [
						"{{SERVER}}keys"
					],
					"path": [
						"{{TEST_UPLOAD_KEY_ID}}"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Upload keys (keys/:id)",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SERVER}}keys/{{TEST_UPLOAD_KEY_ID}}",
					"host": [
						"{{SERVER}}keys"
					],
					"path": [
						"{{TEST_UPLOAD_KEY_ID}}"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Register",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstname\": \"Ondrej\",\n  \"lastname\": \"Rafaj\",\n  \"email\": \"ondrej.rafaj@gmail.com\",\n  \"password\": \"exploited3330\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}register",
					"host": [
						"{{SERVER}}register"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Unknown URL",
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}unknown",
					"host": [
						"{{SERVER}}unknown"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Show tables",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}tables",
					"host": [
						"{{SERVER}}tables"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Settings (settings)",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}settings",
					"host": [
						"{{SERVER}}settings"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Settings (settings?plain)",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}settings?plain=true",
					"host": [
						"{{SERVER}}settings"
					],
					"query": [
						{
							"key": "plain",
							"value": "true",
							"equals": true
						}
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Settings (settings)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a5091550-b98b-464b-bb6f-abfc9a340a46",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 201\"] = responseCode.code === 201;",
							"",
							"// Token check",
							"tests[\"Key has an id\"] = (jsonData[\"id\"].length > 0)",
							"tests[\"Key has an name\"] = (jsonData[\"name\"].length > 0)",
							"tests[\"Key has a token\"] = (jsonData[\"config\"].length > 0)",
							"",
							"postman.setEnvironmentVariable(\"TEST_SETTING_ID\", jsonData[\"id\"]);",
							"",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"test_url2\",\n\t\"config\": \"https://www.boostappstore.com\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}settings",
					"host": [
						"{{SERVER}}settings"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Settings (settings/:id)",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"test_url3\",\n\t\"config\": \"https://www.boostappstore.com :)\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}settings/{{TEST_SETTING_ID}}",
					"host": [
						"{{SERVER}}settings"
					],
					"path": [
						"{{TEST_SETTING_ID}}"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Settings (settings/:id)",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"test_url3\",\n\t\"config\": \"https://www.boostappstore.com :)\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}settings/{{TEST_SETTING_ID}}",
					"host": [
						"{{SERVER}}settings"
					],
					"path": [
						"{{TEST_SETTING_ID}}"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Teapot",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}teapot",
					"host": [
						"{{SERVER}}teapot"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Ping",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}ping",
					"host": [
						"{{SERVER}}ping"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "Errors",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}errors",
					"host": [
						"{{SERVER}}errors"
					]
				},
				"description": null
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{JWT_AUTH}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "bd8a2c58-ab40-4e1d-8335-cca3a3a32c6d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ce39d7b5-21e6-4183-ae88-4c99099551b3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}